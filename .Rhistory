x4[i] <- rexp(lambda4)
x5[i] <- rexp(lambda5)
x6[i] <- rexp(lambda6)
x7[i] <- rexp(lambda7)
}
lambda1 <- 0.1
lambda2 <- 0.25
lambda3 <- 0.5
lambda4 <- 1
lambda5 <- 2
lambda6 <- 4
lambda7 <- 10
for (i in 1:10000) {
x1[i] <- rexp(lambda1)
x2[i] <- rexp(lambda2)
x3[i] <- rexp(lambda3)
x4[i] <- rexp(lambda4)
x5[i] <- rexp(lambda5)
x6[i] <- rexp(lambda6)
x7[i] <- rexp(lambda7)
}
mean(x1)
mean(x2)
mean(x3)
mean(x4)
mean(x5)
mean(x6)
mean(x7)
install.packages("rmarkdown")
A=rbind(c(-0.7749,0.2251,0.2251,0.2251),c(0.2648,-0.7352,0.2648,0.2648),c(0.3188,0.3188,-0.6812,0.3188),c(0.1913,0.1913,0.1913,-0.8087))
A=rbind(c(-0.7749,0.2251,0.2251,0.2251),c(0.2648,-0.7352,0.2648,0.2648),c(0.3188,0.3188,-0.6812,0.3188),c(0.1913,0.1913,0.1913,-0.8087))
View(A)
estuff=eigen(A)
lambda=estuff$values
w=estuff$vectors
w[,3]
w[,4]
lambda
x0=c(0.25,0.25,0.25,0.25)
c=solve(w,x0)
c
x=function(t)c[1]*exp(lambda[1]*t)*w[,1]+c[2]*exp(lambda[2]*t)*w[,2]+c[3]*exp(lambda[3]*t)*w[,3]+c[4]*exp(lambda[4]*t)*w[,4]
x(0)
x0=c(0.25,0.25,0.25,0.192)
c=solve(w,x0)
c
x=function(t)c[1]*exp(lambda[1]*t)*w[,1]+c[2]*exp(lambda[2]*t)*w[,2]+c[3]*exp(lambda[3]*t)*w[,3]+c[4]*exp(lambda[4]*t)*w[,4]
x(0)
t
c
x(0)
x
x0=c(0.25,0.25,0.25,0.25)
c=solve(w,x0)
c
x=function(t)c[1]*exp(lambda[1]*t)*w[,1]+c[2]*exp(lambda[2]*t)*w[,2]+c[3]*exp(lambda[3]*t)*w[,3]+c[4]*exp(lambda[4]*t)*w[,4]
x(0)
x(1)
x(2)
x(2.1)
x(2.4)
x(3)
x(3.5)
x(3.7)
x(3.8)
(4.2)
x(4.2)
x(4.3)
x(4.4)
View(estuff)
P=cbind(c(0.91,0.01,0.08),c(0.57,0.16,0.27),c(0.4,0.07,0.53))
colSums(P)
pi=c(1,0,0) # i.e. dry day with probability one
for(t in 1:10)pi=P%*%pi
print(pi)
P=cbind(c(0.84,0.03,0.01,0.03,0.03),c(0.11,0.80,0.15,0.19,0.09),c(0.01,0.04,0.70,0.02,0.05),c(0.01,0.04,0.07,0.75,0),c(0,0.03,0.07,0.01,0.83))
colSums(P)
pi=c(1,0,0,0,0) # i.e. dry day with probability one
for(t in 1:5)pi=P%*%pi
print(pi)
P=cbind(c(1,.51,0,0,0,0),c(0,0,0.51,0,0,0),c(0,0.49,0,0.51,0),c(0,0,.49,0,0.51,0),c(0,0,0,0.49,0, .51), c(0,0,0,0,.49,0))
P=cbind(c(1,.51,0,0,0,0),c(0,0,0.51,0,0,0),c(0,0.49,0,0.51,0,0),c(0,0,.49,0,0.51,0),c(0,0,0,0.49,0, .51), c(0,0,0,0,.49,0))
colSums(P)
P=cbind(c(1,.51,0,0,0,0),c(0,0,0.51,0,0,0),c(0,0.49,0,0.51,0,0),c(0,0,.49,0,0.51,0),c(0,0,0,0.49,0, .51), c(0,0,0,0,.49,0))
View(P)
P=cbind(c(1,.51,0,0,0,0),c(0,0,0.51,0,0,0),c(0,0.49,0,0.51,0,0),c(0,0,.49,0,0.51,0),c(0,0,0,0.49,0, .51), c(0,0,0,0,.49,0))
colSums(P)
P=cbind(c(1,0,0,0,0,0),c(0.51,0,0.49,0,0,0),c(0,0.51,0,0.49,0,0),c(0,0,.51,0,0.49,0),c(0,0,0,0.51,0, .49), c(0,0,0,0,.51,.49))
colSums(P)
pi=c(0,0,1,0,0,0) # i.e. dry day with probability one
for(t in 1:2)pi=P%*%pi
print(pi)
for(t in 1:3)pi=P%*%pi
print(pi)
for(t in 1:4)pi=P%*%pi
print(pi)
for(t in 1:5)pi=P%*%pi
print(pi)
for(t in 1:50)pi=P%*%pi
print(pi)
P=cbind (c(0.84, 0.11,0.01, 0.04, 0.00), c(0.03, 0.8, 0.04, 0.1, 0.03),c(0.01, 0.15, 0.7, 0.07, 0.07),c(0.03, 0.19, 0.02, 0.75, 0.01), c(0.03, 0.09, 0.05, 0.00, 0.83))
colSums(P)
pi=c(1,0,0,0,0) # i.e. dry day with probability one
for(t in 1:5)pi=P%*%pi
print(pi)
for(t in 1:1000)pi=P%*%pi
print(pi)
P=cbind (c(.25,.25,.25,.25), c(0.25,0.25,0.25,0.25), c(0.25,0.25,0.25,0.25), c(0.25,0.25,0.25,0.25))
P=cbind (c(0.91, 0.01, 0.08), c(0.57, 0.16, 0.27), c(0.4, 0.07, 0.53))
colSums(P)
for(t in 1:10)pi=P%*%pi
print(pi)
P=cbind (c(0.91, 0.01, 0.08), c(0.57, 0.16, 0.27), c(0.4, 0.07, 0.53))
colSums(P)
pi=c() # i.e. dry day with probability one
for(t in 1:10)pi=P%*%pi
print(pi)
P=cbind (c(0.91, 0.01, 0.08), c(0.57, 0.16, 0.27), c(0.4, 0.07, 0.53))
colSums(P)
pi=c() # i.e. dry day with probability one
pi=c(1,0,0) # i.e. dry day with probability one
pi=c(1,0,0) # i.e. dry day with probability one
for(t in 1:10)pi=P%*%pi
print(pi)
for(t in 1:10000)pi=P%*%pi
print(pi)
for(t in 1:20000)pi=P%*%pi
print(pi)
for(t in 1:10)pi=P%*%pi
print(pi)
pi=c(0,0,1) # i.e. dry day with probability one
print(pi)
for(t in 1:10)pi=P%*%pi
print(pi)
P=cbind(c(1, 0.51, 0, 0, 0, 0),c(0,0,0.51,0,0,0),c(0,0.49,0,0.51,0,0),c(0,0,0.49,0,0.51,0),c(0,0,0,0.49,0,0),c(0,0,0,0,0.49,1))
colSums(P)
pi=c(0,0,1,0,0,0)
colSums(P)
rowSums(P)
pi=c(0,0,1,0,0,0)
View(P)
P=rbind(c(1, 0.51, 0, 0, 0, 0),c(0,0,0.51,0,0,0),c(0,0.49,0,0.51,0,0),c(0,0,0.49,0,0.51,0),c(0,0,0,0.49,0,0),c(0,0,0,0,0.49,1))
colSums(P)
pi=c(0,0,1,0,0,0)
for(t in 1:3)pi=P%*%pi
print(pi)
for(t in 1:4)pi=P%*%pi
print(pi)
for(t in 1:5)pi=P%*%pi
print(pi)
for(t in 1:10000000000000000)pi=P%*%pi
for(t in 1:100000)pi=P%*%pi
print(pi)
sj=c(0.56, 0.64, 0.3, 0.4, 0, 0.38, 0.18, 0.25, 0.44)
sa=c(0.53, 0.68, 0.71, 0.38, 0.54, 0.69, 0.66, 0.49, 0.61)
f=c(3.38, 1.27, 2.77, 2.17, 0.05, 4.0, 2.37, 0.5, 1.6)
W=sj*f/2+sa
W=sj*f/2+sa
w
W
low_w=log(w)
low_w=ln(w)
ln(w)
log(W)
mean(log(W))
A=rbind(c(.02, 2, 80),
c(.18, .63, 0),
c(0, 0.07, 0))
View(A)
estuff=eigen(A)
estuff
lambda=estuff$values
lambda
w=estuff$vectors
w
View(estuff)
x0=c(1000, 0, 0)
c=solve(w,x0)
c
x=function(t)c[1]*exp(lambda[1]*t)*w[,1]+c[2]*exp(lambda[2]*t)*w[,2]+c[3]*exp(lambda[3]*t)*w[,3]
x(10)
x(0)
x0=c(1000,0,0)
c=solve(w,x0)
c
x=function(t)c[1]*exp(lambda[1]*t)*w[,1]+c[2]*exp(lambda[2]*t)*w[,2]+c[3]*exp(lambda[3]*t)*w[,3]
x(10)
1-pnorm(1, mean = 0, sd=sqrt(2))
w2= rbind(c(0.95 0 0 0.1),
c(0.05 0 0 0),
c(0 1 0 0)
c(0 0 1 0.9))
w2= rbind(c(0.95 0 0 0.1),
c(0.05 0 0 0),
c(0 1 0 0),
c(0 0 1 0.9))
w2= rbind(c(0.95,0,0,0.1),
c(0.05,0,0,0),
c(0,1,0,0),
c(0,0,1,0.9))
P= rbind(c(0.95,0,0,0.1),
c(0.05,0,0,0),
c(0,1,0,0),
c(0,0,1,0.9))
P= rbind(c(0.95,0,0,0.1),
c(0.05,0,0,0),
c(0,1,0,0),
c(0,0,1,0.9))
estuff=eigen(P)
estuff
lambda=estuff$values
lambda
w=estuff$vectors
w
T=rep(1,5)
T%*%solve(diag(8)-A)
T%*%solve(diag(8)-P)
w
P
library(dplyr)
library(lubridate)
library(tidyverse)
library(ggrepel)
d = read_csv("allclimdata.csv") %>%
rename(pop = ID1) %>%
rename(site = ID2) %>%
rename(lat = Latitude) %>%
rename(long = Longitude) %>%
rename(el = Elevation) %>%
mutate(herbivory =
ifelse(pop %in% c("LV1", "TM2", "CP2", "YOSE11", "BH", "SHA", "WL2", "YOSE1", "SQ3", "KC2"), "x", NA)
) %>%
filter(herbivory == "x") %>%
#filter(year < 2019) %>%
select(year, pop, el, lat, long, site, "CMD_sm", "PPT_sm", "DD5_sm") %>%
gather(key="var", value="value", "CMD_sm", "PPT_sm", "DD5_sm")
clams <- read.table("Datasets/Clams.txt")
setwd("~/GitHub/linear-mized-modeling-eve298")
clams <- read.table("Datasets/Clams.txt")
'use three dots in files page to navigate to course files'
setwd("~/GitHub/linear-mized-modeling-eve298")
clams <- read.table("Datasets/Clams.txt")
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
View(clams)
clams$fMONTH <- as.factor(clams$MONTH)
str(clams)
levels(clams$fMONTH)
mod.cat <- lm(AFD ~ LENGTH + fMOTH, data = clams)
'use three dots in files page to navigate to course files'
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
clams <- read.table("Datasets/Clams.txt")
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
clams <- as.data.frame(clams)
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
View(clams)
clams %>%
row_to_names(row_number = 1)
#libraries
library(janitor)
#libraries
install.packages("janitor")
clams %>%
row_to_names(row_number = 1)
clams <- read.table("Datasets/Clams.txt")
clams <- as.data.frame(clams)
clams %>%
row_to_names(row_number = 1)
clams %>% row_to_names(row_number = 1)
library(dplyr)
clams %>% row_to_names(row_number = 1)
library(janitor)
library(dplyr)
clams %>%
row_to_names(row_number = 1)
View(clams)
clams <- clams %>%
row_to_names(row_number = 2)
View(clams)
clams <- read.table("Datasets/Clams.txt")
clams <- clams %>%
row_to_names(row_number = 1)
View(clams)
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
str(clams)
mod.cat <- lm(AFD ~ LENGTH + fMOTH, data = clams)
mod.cat <- lm(AFD ~ LENGTH + fMONTH, data = clams)
mod.cont <- lm(AFD ~ LENGTH + MONTH, data = clams)
#1 variance homogeneity
plot(mod.cat, 1)
#2 normality of errors
plot(mod.cat, 2) #shows a qq plot
#3 variance homogeneity
plot(resid(mod.cat) ~ clams$Length)
View(clams)
#3 variance homogeneity
plot(resid(mod.cat) ~ clams$LENGTH)
boxplot(resid(mod.cat) ~ clams$fMONTH)
plot(AFD ~ LENGTH, data = clams)
summary(mod.cat) # B0, estimate of (intercept), Length estimate is the slope of that line (B1), etc
#colorcoding
plot(AFD ~ LENGTH, data = clams, type = "n")
points(AFD[fMONTH == "2"] ~ LENGTH[fMONTH == "2"], data = clams, col = "red") #only grab the AFD from month 2 by length at month 2, color in red
coef(mod.cat)[1] #coefficients from categorical model but only the first one
abline(a = coef(mod.cat[1], b = coef(mod.cat)[2], col = "red"))
abline(a = coef(mod.cat)[1], b = coef(mod.cat)[2], col = "red")
points(AFD[fMONTH == "2"] ~ LENGTH[fMONTH == "2"], data = clams, col = "red") #only grab the AFD from month 2 by length at month 2, color in red
points(AFD[fMONTH == "2"] ~ LENGTH[fMONTH == "2"], data = clams, col = "red") #only grab the AFD from month 2 by length at month 2, color in red
points(AFD[fMONTH == "3"] ~ LENGTH[fMONTH == "3"], data = clams, col = "blue")
abline(a = coef(mod.cat)[1] + coef(mod.cat)[3], b = coef(mod.cat)[2], col = "blue")
View(clams)
clams <- read.table("Datasets/Clams.txt")
clams <- clams %>%
row_to_names(row_number = 1)
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
str(clams)
levels(clams$fMONTH)
mod.cat <- lm(AFD ~ LENGTH + fMONTH, data = clams)
mod.cont <- lm(AFD ~ LENGTH + MONTH, data = clams)
#1 variance homogeneity
plot(mod.cat, 1)
#2 normality of errors
plot(mod.cat, 2) #shows a qq plot
#if all points fall on line, then normal, if big tail where falling off the line
hist(resid(mod.cat))
#3 variance homogeneity
plot(resid(mod.cat) ~ clams$LENGTH) #violin is bad
boxplot(resid(mod.cat) ~ clams$fMONTH)
# EVE 298 - Linear mixed modelins in Ecology and Evolution
# Danielle De La Pascua
###
### Lab 1 ----
###
#libraries
library(janitor)
library(dplyr)
'use three dots in files page to navigate to course files'
setwd("~/GitHub/linear-mized-modeling-eve298")
clams <- read.table("Datasets/Clams.txt")
clams <- clams %>%
row_to_names(row_number = 1)
### Lab 2 ----
clams$fMONTH <- as.factor(clams$MONTH)
str(clams)
levels(clams$fMONTH)
'linear model with categoriical predictor'
mod.cat <- lm(AFD ~ LENGTH + fMONTH, data = clams)
'linear model with month as continuous predictor'
mod.cont <- lm(AFD ~ LENGTH + MONTH, data = clams)
'model diagnostics'
#1 variance homogeneity
plot(mod.cat, 1)
#you want to see a starrynight, no variation, but this does not show this, it shows an arc (trumpet plot) -- log linearity
#usually this tests variance homogeneity
#2 normality of errors
plot(mod.cat, 2) #shows a qq plot
#if all points fall on line, then normal, if big tail where falling off the line
hist(resid(mod.cat))
#3 variance homogeneity
plot(resid(mod.cat) ~ clams$LENGTH) #violin is bad
boxplot(resid(mod.cat) ~ clams$fMONTH)
#4 plot predicted values
plot(AFD ~ LENGTH, data = clams)
summary(mod.cat) # B0, estimate of (intercept), Length estimate is the slope of that line (B1), etc
#colorcoding
plot(AFD ~ LENGTH, data = clams, type = "n")
points(AFD[fMONTH == "2"] ~ LENGTH[fMONTH == "2"], data = clams, col = "red") #only grab the AFD from month 2 by length at month 2, color in red
coef(mod.cat)[1] #coefficients from categorical model but only the first one
abline(a = coef(mod.cat)[1], b = coef(mod.cat)[2], col = "red")
# DO THIS FOR THE OTHER FIVE MONTHS # ----
'add in data & predicted values month 3'
points(AFD[fMONTH == "3"] ~ LENGTH[fMONTH == "3"], data = clams, col = "blue")
abline(a = coef(mod.cat)[1] + coef(mod.cat)[3], b = coef(mod.cat)[2], col = "blue")
#month 4
'add in data & predicted values month 3'
points(AFD[fMONTH == "4"] ~ LENGTH[fMONTH == "4"], data = clams, col = "purple")
abline(a = coef(mod.cat)[1] + coef(mod.cat)[4], b = coef(mod.cat)[2], col = "purple")
#month 9
'add in data & predicted values month 3'
points(AFD[fMONTH == "9"] ~ LENGTH[fMONTH == "9"], data = clams, col = "yellow")
abline(a = coef(mod.cat)[1] + coef(mod.cat)[5], b = coef(mod.cat)[2], col = "yellow")
str(clams)
#Validate and plot predicted values
mod.ln <- lm(LNAFD ~ LNLENGTH + fMONTH, data = clams)
#Validate and plot predicted values - different slopes
mod.ln <- lm(LNAFD ~ LNLENGTH*fMONTH, + fmoth, data = clams)
#1 variance homogeneity
plot(mod.ln, 1)
#2 normality of errors
plot(mod.ln, 2)
#3 variance homogeneity
plot(resid(mod.ln))
#4 plot predicted values
plot(LNAFD ~ LNLENGTH, data = clams)
summary(mod.ln) # B0, estimate of (intercept), Length estimate is the slope of that line (B1), etc
plot(LNAFD ~ LNLENGTH, data = clams, type = "n")
points(LNAFD[fMONTH == "2"] ~ LENGTH[fMONTH == "2"], data = clams, col = "red") #only grab the AFD from month 2 by length at month 2, color in red
coef(mod.ln)[1] #coefficients from categorical model but only the first one
abline(a = coef(mod.ln[1], b = coef(mod.ln)[2], col = "red"))
'add in data & predicted values month 3'
points(LNAFD[fMONTH == "3"] ~ LNLENGTH[fMONTH == "3"], data = clams, col = "blue")
abline(a = coef(mod.ln)[1] + coef(mod.ln)[3], b = coef(mod.ln)[2], col = "blue")
#month 4
'add in data & predicted values month 3'
points(LNAFD[fMONTH == "4"] ~ LNLENGTH[fMONTH == "4"], data = clams, col = "purple")
abline(a = coef(mod.ln)[1] + coef(mod.ln)[4], b = coef(mod.ln)[2], col = "purple")
#month 9
'add in data & predicted values month 3'
points(LNAFD[fMONTH == "9"] ~ LNLENGTH[fMONTH == "9"], data = clams, col = "yellow")
abline(a = coef(mod.ln)[1] + coef(mod.ln)[5], b = coef(mod.ln)[2], col = "yellow")
#libraries
library(janitor)
library(dplyr)
'use three dots in files page to navigate to course files'
setwd("~/GitHub/linear-mized-modeling-eve298")
owls <- read.table("Datasets/Owls.txt", header = T)
head(owls)
tails(owls)
tail(owls)
str(owls)
hist(owls$NegPerChick)
#log transform this
owls$LogNeg <- log10(owls$NegPerChick +1)
mod1 <- lme(NegPerChick ~ SexParent*FoodTreatment + ArrivalTime*SexParent,
random = ~1|Nest,
data = owls)
require(lme4)
mod1 <- lme(NegPerChick ~ SexParent*FoodTreatment + ArrivalTime*SexParent,
random = ~1|Nest,
data = owls)
library(lme4)
mod1 <- lme(NegPerChick ~ SexParent*FoodTreatment + ArrivalTime*SexParent,
random = ~1|Nest,
data = owls)
library(nlme)
mod1 <- lme(NegPerChick ~ SexParent*FoodTreatment + ArrivalTime*SexParent,
random = ~1|Nest,
data = owls)
mod1log <- lme(LogNeg ~ SexParent*FoodTreatment + ArrivalTime*SexParent,
random = ~1|Nest,
data = owls)
hist(owls$SexParent)
View(owls)
loyn <- read.table("Datasets/loyn.txt", header = T)
loyn$fGRAZE <- as.factor(loyn$GRAZE)
str(loyn)
owls$fSexParent <- as.factor(owls$SexParent)
ggplot(owls) + geom_bar(aes(x = SexParent))
library(ggplot2)
ggplot(owls) + geom_bar(aes(x = SexParent))
# response variable
hist(owls$Nest)
# response variable
hist(owls$FoodTreatment)
# response variable
hist(owls$ArrivalTime)
dotchart(owls$ArrivalTime)
dotchart(owls$ArrivalTime, color = owls$fSexParent)
# response variable
hist(owls$ArrivalTime)
str(owls)
# response variable
hist(owls$LogNeg)
dotchart(owls$LogNeg)
dotchart(loyn$ABUND)
# predictor variables
hist(owls$FoodTreatment)
ggplot(owls) + geom_bar(aes(x = FoodTreatment))
hist(owls$ArrivalTime)
dotchart(loyn$DIST)
dotchart(owls$ArrivalTime, colors = fSexParent)
dotchart(owls$ArrivalTime, colors = SexParent)
dotchart(owls$ArrivalTime, colors = owls$SexParent)
dotchart(owls$ArrivalTime, colors = owls$fSexParent)
dotchart(owls$ArrivalTime, color = owls$fSexParent)
dotchart(owls$ArrivalTime, color = owls$fSexParent)
View(owls)
hist(owls$BroodSize)
mod1 <- lme(NegPerChick ~ SexParent*FoodTreatment + ArrivalTime*SexParent,
random = ~1|Nest,
data = owls)
ggplot(owls) + geom_bar(aes(x = Nest))
# response variable
hist(owls$LogNeg)
dotchart(owls$LogNeg)
dotchart(owls$ArrivalTime, color = owls$fSexParent)
pairs(loyn)
pairs(owls)
pairs(owls[,4:7]) # subsetting dataframes [rows, columns]
coplot(NegPerChick ~ ArrivalTime|FoodTreatment, data = owls)
coplot(NegPerChick ~ ArrivalTime|SexParent, data = owls)
ggplot(owls) + geom_bar(aes(x = SexParent, y = NegPerChick))
ggplot(owls) + geom_boxplot(aes(x = SexParent, y = NegPerChick))
ggplot(owls) + geom_boxplot(aes(x = FoodTreatment, y = NegPerChick))
ggplot(owls) + geom_boxplot(aes(x = Nest, y = NegPerChick))
ggplot(owls) + geom_boxplot(aes(x = BroodSize, y = NegPerChick))
owls$fBroodSize <- as.factor(owls$BroodSize)
ggplot(owls) + geom_boxplot(aes(x = fBroodSize, y = NegPerChick))
mod2log <- lme(LogNeg ~ SexParent*FoodTreatment + ArrivalTime*SexParent,
data = owls)
summary(mod1log)
mod.test <- gls(LogNeg ~ SexParent*FoodTreatment, data = owls)
anova(mod1log, mod.test)
